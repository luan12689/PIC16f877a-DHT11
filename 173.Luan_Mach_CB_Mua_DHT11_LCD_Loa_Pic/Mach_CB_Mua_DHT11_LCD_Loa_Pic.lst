CCS PCM C Compiler, Version 4.105, 58523               16-Dec-19 13:41

               Filename: C:\Users\Hi\Desktop\New folder\173.Luan_Mach_CB_Mua_DHT11_LCD_Loa_Pic\Mach_CB_Mua_DHT11_LCD_Loa_Pic.lst

               ROM used: 777 words (9%)
                         Largest free fragment is 2048
               RAM used: 10 (3%) at main() level
                         24 (7%) worst case
               Stack:    6 locations

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   2F6
0003:  NOP
.................... #include <16F877a.h>        
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #fuses      HS                   
.................... #use delay(clock=20000000)     
*
002D:  MOVLW  31
002E:  MOVWF  04
002F:  BCF    03.7
0030:  MOVF   00,W
0031:  BTFSC  03.2
0032:  GOTO   040
0033:  MOVLW  06
0034:  MOVWF  78
0035:  CLRF   77
0036:  DECFSZ 77,F
0037:  GOTO   036
0038:  DECFSZ 78,F
0039:  GOTO   035
003A:  MOVLW  7B
003B:  MOVWF  77
003C:  DECFSZ 77,F
003D:  GOTO   03C
003E:  DECFSZ 00,F
003F:  GOTO   033
0040:  RETURN
....................  
.................... #define LCD_ENABLE_PIN  PIN_b2                                     
.................... #define LCD_RS_PIN      PIN_b4                                    
.................... #define LCD_RW_PIN      PIN_b3                                     
....................  
.................... #define LCD_DATA4       PIN_d7                                     
.................... #define LCD_DATA5       PIN_d6                                     
.................... #define LCD_DATA6       PIN_d5                                     
.................... #define LCD_DATA7       PIN_d4 
....................  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                     The following have special meaning:               //// 
.................... ////                      \f  Clear display                                //// 
.................... ////                      \n  Go to start of second line                   //// 
.................... ////                      \b  Move back one position                       //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    BOOLEAN enable;           // on to an I/O port to gain 
....................    BOOLEAN rs;               // access to the LCD pins. 
....................    BOOLEAN rw;               // The bits are allocated from 
....................    BOOLEAN unused;           // low order up.  ENABLE will 
....................    int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... BYTE lcd_read_nibble(void); 
....................  
.................... BYTE lcd_read_byte(void) 
.................... { 
....................    BYTE low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
00A8:  BSF    08.7
....................    output_float(LCD_DATA5); 
00A9:  BSF    08.6
....................    output_float(LCD_DATA6); 
00AA:  BSF    08.5
....................    output_float(LCD_DATA7); 
00AB:  BSF    08.4
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00AC:  BCF    03.5
00AD:  BSF    06.3
00AE:  BSF    03.5
00AF:  BCF    06.3
....................    delay_cycles(1); 
00B0:  NOP
....................    lcd_output_enable(1); 
00B1:  BCF    03.5
00B2:  BSF    06.2
00B3:  BSF    03.5
00B4:  BCF    06.2
....................    delay_cycles(1); 
00B5:  NOP
....................    high = lcd_read_nibble(); 
00B6:  BCF    03.5
00B7:  CALL   06F
00B8:  MOVF   78,W
00B9:  MOVWF  30
....................        
....................    lcd_output_enable(0); 
00BA:  BCF    06.2
00BB:  BSF    03.5
00BC:  BCF    06.2
....................    delay_cycles(1); 
00BD:  NOP
....................    lcd_output_enable(1); 
00BE:  BCF    03.5
00BF:  BSF    06.2
00C0:  BSF    03.5
00C1:  BCF    06.2
....................    delay_us(1); 
00C2:  GOTO   0C3
00C3:  GOTO   0C4
00C4:  NOP
....................    low = lcd_read_nibble(); 
00C5:  BCF    03.5
00C6:  CALL   06F
00C7:  MOVF   78,W
00C8:  MOVWF  2F
....................        
....................    lcd_output_enable(0); 
00C9:  BCF    06.2
00CA:  BSF    03.5
00CB:  BCF    06.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00CC:  BCF    08.7
....................    output_drive(LCD_DATA5); 
00CD:  BCF    08.6
....................    output_drive(LCD_DATA6); 
00CE:  BCF    08.5
....................    output_drive(LCD_DATA7); 
00CF:  BCF    08.4
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00D0:  BCF    03.5
00D1:  SWAPF  30,W
00D2:  MOVWF  77
00D3:  MOVLW  F0
00D4:  ANDWF  77,F
00D5:  MOVF   77,W
00D6:  IORWF  2F,W
00D7:  MOVWF  78
.................... } 
....................  
.................... BYTE lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
006F:  CLRF   31
....................    BYTE n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
0070:  BSF    03.5
0071:  BSF    08.7
0072:  MOVLW  00
0073:  BCF    03.5
0074:  BTFSC  08.7
0075:  MOVLW  01
0076:  IORWF  31,F
....................    n |= input(LCD_DATA5) << 1; 
0077:  BSF    03.5
0078:  BSF    08.6
0079:  MOVLW  00
007A:  BCF    03.5
007B:  BTFSC  08.6
007C:  MOVLW  01
007D:  MOVWF  77
007E:  BCF    03.0
007F:  RLF    77,F
0080:  MOVF   77,W
0081:  IORWF  31,F
....................    n |= input(LCD_DATA6) << 2; 
0082:  BSF    03.5
0083:  BSF    08.5
0084:  MOVLW  00
0085:  BCF    03.5
0086:  BTFSC  08.5
0087:  MOVLW  01
0088:  MOVWF  77
0089:  RLF    77,F
008A:  RLF    77,F
008B:  MOVLW  FC
008C:  ANDWF  77,F
008D:  MOVF   77,W
008E:  IORWF  31,F
....................    n |= input(LCD_DATA7) << 3; 
008F:  BSF    03.5
0090:  BSF    08.4
0091:  MOVLW  00
0092:  BCF    03.5
0093:  BTFSC  08.4
0094:  MOVLW  01
0095:  MOVWF  77
0096:  RLF    77,F
0097:  RLF    77,F
0098:  RLF    77,F
0099:  MOVLW  F8
009A:  ANDWF  77,F
009B:  MOVF   77,W
009C:  IORWF  31,F
....................     
....................    return(n); 
009D:  MOVF   31,W
009E:  MOVWF  78
....................   #else 
....................    return(lcd.data); 
....................   #endif 
.................... } 
009F:  RETURN
....................  
.................... void lcd_send_nibble(BYTE n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
0041:  BTFSC  30.0
0042:  GOTO   045
0043:  BCF    08.7
0044:  GOTO   046
0045:  BSF    08.7
0046:  BSF    03.5
0047:  BCF    08.7
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
0048:  BCF    03.5
0049:  BTFSC  30.1
004A:  GOTO   04D
004B:  BCF    08.6
004C:  GOTO   04E
004D:  BSF    08.6
004E:  BSF    03.5
004F:  BCF    08.6
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
0050:  BCF    03.5
0051:  BTFSC  30.2
0052:  GOTO   055
0053:  BCF    08.5
0054:  GOTO   056
0055:  BSF    08.5
0056:  BSF    03.5
0057:  BCF    08.5
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
0058:  BCF    03.5
0059:  BTFSC  30.3
005A:  GOTO   05D
005B:  BCF    08.4
005C:  GOTO   05E
005D:  BSF    08.4
005E:  BSF    03.5
005F:  BCF    08.4
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
0060:  NOP
....................    lcd_output_enable(1); 
0061:  BCF    03.5
0062:  BSF    06.2
0063:  BSF    03.5
0064:  BCF    06.2
....................    delay_us(2); 
0065:  MOVLW  03
0066:  MOVWF  77
0067:  DECFSZ 77,F
0068:  GOTO   067
....................    lcd_output_enable(0); 
0069:  BCF    03.5
006A:  BCF    06.2
006B:  BSF    03.5
006C:  BCF    06.2
.................... } 
006D:  BCF    03.5
006E:  RETURN
....................  
.................... void lcd_send_byte(BYTE address, BYTE n) 
.................... { 
....................    lcd_enable_tris(); 
*
00A0:  BSF    03.5
00A1:  BCF    06.2
....................    lcd_rs_tris(); 
00A2:  BCF    06.4
....................    lcd_rw_tris(); 
00A3:  BCF    06.3
....................  
....................    lcd_output_rs(0); 
00A4:  BCF    03.5
00A5:  BCF    06.4
00A6:  BSF    03.5
00A7:  BCF    06.4
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00D8:  MOVF   78,W
00D9:  MOVWF  2F
00DA:  BTFSS  2F.7
00DB:  GOTO   0DE
00DC:  BSF    03.5
00DD:  GOTO   0A8
....................    lcd_output_rs(address); 
00DE:  MOVF   2D,F
00DF:  BTFSS  03.2
00E0:  GOTO   0E3
00E1:  BCF    06.4
00E2:  GOTO   0E4
00E3:  BSF    06.4
00E4:  BSF    03.5
00E5:  BCF    06.4
....................    delay_cycles(1); 
00E6:  NOP
....................    lcd_output_rw(0); 
00E7:  BCF    03.5
00E8:  BCF    06.3
00E9:  BSF    03.5
00EA:  BCF    06.3
....................    delay_cycles(1); 
00EB:  NOP
....................    lcd_output_enable(0); 
00EC:  BCF    03.5
00ED:  BCF    06.2
00EE:  BSF    03.5
00EF:  BCF    06.2
....................    lcd_send_nibble(n >> 4); 
00F0:  BCF    03.5
00F1:  SWAPF  2E,W
00F2:  MOVWF  2F
00F3:  MOVLW  0F
00F4:  ANDWF  2F,F
00F5:  MOVF   2F,W
00F6:  MOVWF  30
00F7:  CALL   041
....................    lcd_send_nibble(n & 0xf); 
00F8:  MOVF   2E,W
00F9:  ANDLW  0F
00FA:  MOVWF  2F
00FB:  MOVWF  30
00FC:  CALL   041
.................... } 
00FD:  RETURN
....................  
.................... void lcd_init(void)  
.................... { 
....................    BYTE i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
*
010A:  BSF    03.5
010B:  BCF    08.7
....................    output_drive(LCD_DATA5); 
010C:  BCF    08.6
....................    output_drive(LCD_DATA6); 
010D:  BCF    08.5
....................    output_drive(LCD_DATA7); 
010E:  BCF    08.4
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
010F:  BCF    06.2
....................    lcd_rs_tris(); 
0110:  BCF    06.4
....................    lcd_rw_tris(); 
0111:  BCF    06.3
....................  #endif 
....................  
....................    lcd_output_rs(0); 
0112:  BCF    03.5
0113:  BCF    06.4
0114:  BSF    03.5
0115:  BCF    06.4
....................    lcd_output_rw(0); 
0116:  BCF    03.5
0117:  BCF    06.3
0118:  BSF    03.5
0119:  BCF    06.3
....................    lcd_output_enable(0); 
011A:  BCF    03.5
011B:  BCF    06.2
011C:  BSF    03.5
011D:  BCF    06.2
....................      
....................    delay_ms(15); 
011E:  MOVLW  0F
011F:  BCF    03.5
0120:  MOVWF  31
0121:  CALL   02D
....................    for(i=1;i<=3;++i) 
0122:  MOVLW  01
0123:  MOVWF  25
0124:  MOVF   25,W
0125:  SUBLW  03
0126:  BTFSS  03.0
0127:  GOTO   130
....................    { 
....................        lcd_send_nibble(3); 
0128:  MOVLW  03
0129:  MOVWF  30
012A:  CALL   041
....................        delay_ms(5); 
012B:  MOVLW  05
012C:  MOVWF  31
012D:  CALL   02D
....................    } 
012E:  INCF   25,F
012F:  GOTO   124
....................      
....................    lcd_send_nibble(2); 
0130:  MOVLW  02
0131:  MOVWF  30
0132:  CALL   041
....................    for(i=0;i<=3;++i) 
0133:  CLRF   25
0134:  MOVF   25,W
0135:  SUBLW  03
0136:  BTFSS  03.0
0137:  GOTO   141
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0138:  MOVF   25,W
0139:  CALL   004
013A:  MOVWF  26
013B:  CLRF   2D
013C:  MOVF   26,W
013D:  MOVWF  2E
013E:  CALL   0A0
013F:  INCF   25,F
0140:  GOTO   134
.................... } 
....................  
.................... void lcd_gotoxy(BYTE x, BYTE y) 
.................... { 
....................    BYTE address; 
....................     
....................    if(y!=1) 
*
014E:  DECFSZ 2A,W
014F:  GOTO   151
0150:  GOTO   154
....................       address=LCD_LINE_TWO; 
0151:  MOVLW  40
0152:  MOVWF  2B
....................    else 
0153:  GOTO   155
....................       address=0; 
0154:  CLRF   2B
....................       
....................    address+=x-1; 
0155:  MOVLW  01
0156:  SUBWF  29,W
0157:  ADDWF  2B,F
....................    lcd_send_byte(0,0x80|address); 
0158:  MOVF   2B,W
0159:  IORLW  80
015A:  MOVWF  2C
015B:  CLRF   2D
015C:  MOVF   2C,W
015D:  MOVWF  2E
015E:  CALL   0A0
.................... } 
015F:  RETURN
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
....................    { 
0160:  MOVF   28,W
0161:  XORLW  0C
0162:  BTFSC  03.2
0163:  GOTO   16B
0164:  XORLW  06
0165:  BTFSC  03.2
0166:  GOTO   173
0167:  XORLW  02
0168:  BTFSC  03.2
0169:  GOTO   179
016A:  GOTO   17E
....................       case '\f'   :  lcd_send_byte(0,1); 
016B:  CLRF   2D
016C:  MOVLW  01
016D:  MOVWF  2E
016E:  CALL   0A0
....................                      delay_ms(2); 
016F:  MOVLW  02
0170:  MOVWF  31
0171:  CALL   02D
....................                      break; 
0172:  GOTO   184
....................                       
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0173:  MOVLW  01
0174:  MOVWF  29
0175:  MOVLW  02
0176:  MOVWF  2A
0177:  CALL   14E
0178:  GOTO   184
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0179:  CLRF   2D
017A:  MOVLW  10
017B:  MOVWF  2E
017C:  CALL   0A0
017D:  GOTO   184
....................       
....................       default     : lcd_send_byte(1,c);     break; 
017E:  MOVLW  01
017F:  MOVWF  2D
0180:  MOVF   28,W
0181:  MOVWF  2E
0182:  CALL   0A0
0183:  GOTO   184
....................    } 
.................... } 
0184:  RETURN
....................   
.................... char lcd_getc(BYTE x, BYTE y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
....................   
.................... #define     loa         pin_d0          
.................... #define     led         pin_c2     
.................... #define     mua         pin_d1         
....................  
.................... #BIT  DHT_DATA_OUT =  0x05.0        // chan dht11 gan vao vdk  
.................... #BIT  DHT_DATA_IN  =  0x05.0        // PORTA . bit so 0 
.................... #BIT  DHT_DDR_DATA =  0x85.0 
....................  
.................... #define DHT_ER    0 
.................... #define DHT_OK    1 
....................  
.................... #define DDROUT    0 
.................... #define DDRIN     1 
....................  
.................... UNSIGNED int8 ND,ND1,DA,DA1; 
....................  
....................  
.................... VOID setup()       
.................... { 
....................    SET_TRIS_A(0Xff);       // khoi tao port di vao vdk 
*
00FE:  MOVLW  FF
00FF:  BSF    03.5
0100:  MOVWF  05
....................    SET_TRIS_e(0Xff); 
0101:  BSF    09.0
0102:  BSF    09.1
0103:  BSF    09.2
....................    SET_TRIS_d(0X00); 
0104:  MOVLW  00
0105:  MOVWF  08
....................    set_tris_b(0x00);    
0106:  MOVWF  06
....................    set_tris_c(0x00);    
0107:  MOVWF  07
0108:  BCF    03.5
0109:  MOVWF  24
....................     
....................    lcd_init();                
....................    output_low(loa);            
*
0141:  BSF    03.5
0142:  BCF    08.0
0143:  BCF    03.5
0144:  BCF    08.0
....................    output_low(led);      
0145:  BCF    24.2
0146:  MOVF   24,W
0147:  BSF    03.5
0148:  MOVWF  07
0149:  BCF    03.5
014A:  BCF    07.2
.................... } 
014B:  BCF    0A.3
014C:  BCF    0A.4
014D:  GOTO   305 (RETURN)
.................... //unsigned int8 DHT_GetTemHumi (unsigned int8 &tem1,&tem2,unsigned int8 &humi1,&humi2); 
....................  
.................... unsigned int8 DHT_GetTemHumi(unsigned int8 &tem1,&tem2,unsigned int8 &humi1,&humi2) 
.................... { 
....................    unsigned int8 buffer[5]={0,0,0,0,0}; 
*
01E0:  CLRF   25
01E1:  CLRF   26
01E2:  CLRF   27
01E3:  CLRF   28
01E4:  CLRF   29
....................    unsigned int8 ii,i,checksum; 
....................        
....................    DHT_DDR_DATA=DDROUT;   // set la cong ra, huong vao hay ra 
01E5:  BSF    03.5
01E6:  BCF    05.0
....................    DHT_DATA_OUT=1; 
01E7:  BCF    03.5
01E8:  BSF    05.0
....................    delay_us(60); 
01E9:  MOVLW  63
01EA:  MOVWF  77
01EB:  DECFSZ 77,F
01EC:  GOTO   1EB
01ED:  GOTO   1EE
....................    DHT_DATA_OUT=0; 
01EE:  BCF    05.0
....................    delay_ms(25); // it nhat 18ms 
01EF:  MOVLW  19
01F0:  MOVWF  31
01F1:  CALL   02D
....................    DHT_DATA_OUT=1;     
01F2:  BSF    05.0
....................    DHT_DDR_DATA=DDRIN;//set la cong vao 
01F3:  BSF    03.5
01F4:  BSF    05.0
....................    delay_us(60); 
01F5:  MOVLW  63
01F6:  MOVWF  77
01F7:  DECFSZ 77,F
01F8:  GOTO   1F7
01F9:  GOTO   1FA
....................    if(DHT_DATA_IN)return DHT_ER ; 
01FA:  BCF    03.5
01FB:  BTFSS  05.0
01FC:  GOTO   201
01FD:  MOVLW  00
01FE:  MOVWF  78
01FF:  GOTO   251
....................    else while(!(DHT_DATA_IN));   //Doi DaTa len 1 
0200:  GOTO   203
0201:  BTFSS  05.0
0202:  GOTO   201
....................    delay_us(60);//cho 60us 
0203:  MOVLW  63
0204:  MOVWF  77
0205:  DECFSZ 77,F
0206:  GOTO   205
0207:  GOTO   208
....................    if(!DHT_DATA_IN)return DHT_ER; 
0208:  BTFSC  05.0
0209:  GOTO   20E
020A:  MOVLW  00
020B:  MOVWF  78
020C:  GOTO   251
....................    else while((DHT_DATA_IN));    //Doi Data ve 0 
020D:  GOTO   210
020E:  BTFSC  05.0
020F:  GOTO   20E
....................    //Bat dau doc du lieu 
....................    for(i=0;i<5;i++) 
0210:  CLRF   2B
0211:  MOVF   2B,W
0212:  SUBLW  04
0213:  BTFSS  03.0
0214:  GOTO   23B
....................    { 
....................       for(ii=0;ii<8;ii++) 
0215:  CLRF   2A
0216:  MOVF   2A,W
0217:  SUBLW  07
0218:  BTFSS  03.0
0219:  GOTO   239
....................       {    
....................          while((!DHT_DATA_IN));//Doi Data len 1 
021A:  BTFSS  05.0
021B:  GOTO   21A
....................          delay_us(50); 
021C:  MOVLW  53
021D:  MOVWF  77
021E:  DECFSZ 77,F
021F:  GOTO   21E
....................          if(DHT_DATA_IN) 
0220:  BTFSS  05.0
0221:  GOTO   237
....................          { 
....................             buffer[i]|=(1<<(7-ii)); 
0222:  MOVLW  25
0223:  ADDWF  2B,W
0224:  MOVWF  04
0225:  BCF    03.7
0226:  MOVF   2A,W
0227:  SUBLW  07
0228:  MOVWF  78
0229:  MOVLW  01
022A:  MOVWF  77
022B:  MOVF   78,F
022C:  BTFSC  03.2
022D:  GOTO   232
022E:  BCF    03.0
022F:  RLF    77,F
0230:  DECFSZ 78,F
0231:  GOTO   22E
0232:  MOVF   77,W
0233:  IORWF  00,W
0234:  MOVWF  00
....................             while((DHT_DATA_IN));//Doi Data xuong 0 
0235:  BTFSC  05.0
0236:  GOTO   235
....................          } 
....................       } 
0237:  INCF   2A,F
0238:  GOTO   216
....................    } 
0239:  INCF   2B,F
023A:  GOTO   211
....................    checksum=buffer[0]+buffer[1]+buffer[2]+buffer[3]; 
023B:  MOVF   26,W
023C:  ADDWF  25,W
023D:  ADDWF  27,W
023E:  ADDWF  28,W
023F:  MOVWF  2C
....................    if((checksum)!=buffer[4])return DHT_ER; 
0240:  MOVF   29,W
0241:  SUBWF  2C,W
0242:  BTFSC  03.2
0243:  GOTO   247
0244:  MOVLW  00
0245:  MOVWF  78
0246:  GOTO   251
....................    tem1  =   buffer[2];//gia tri phan nguyen 
0247:  MOVF   27,W
0248:  MOVWF  20
....................    tem2  =   buffer[3];//gia tri phan thap phan 
0249:  MOVF   28,W
024A:  MOVWF  21
....................    humi1 =   buffer[0];//gia tri phan nguyen 
024B:  MOVF   25,W
024C:  MOVWF  22
....................    humi2 =   buffer[1];//gia tri phan thap phan 
024D:  MOVF   26,W
024E:  MOVWF  23
....................    return DHT_OK; 
024F:  MOVLW  01
0250:  MOVWF  78
.................... } 
....................  
.................... void doc_dht11() 
.................... { 
*
001A:  DATA 00,00
....................     if(DHT_GetTemHumi(ND,ND1,DA,DA1)==1) 
*
0251:  DECFSZ 78,W
0252:  GOTO   2A0
....................     { 
....................        lcd_gotoxy(1,1);            
0253:  MOVLW  01
0254:  MOVWF  29
0255:  MOVWF  2A
0256:  CALL   14E
....................        lcd_putc("ND:"); 
0257:  MOVLW  0C
0258:  BSF    03.6
0259:  MOVWF  0D
025A:  MOVLW  00
025B:  MOVWF  0F
025C:  BCF    03.6
025D:  CALL   185
....................        lcd_putc(ND/10+0X30);         
025E:  MOVF   20,W
025F:  MOVWF  25
0260:  MOVLW  0A
0261:  MOVWF  26
0262:  CALL   1CB
0263:  MOVLW  30
0264:  ADDWF  78,W
0265:  MOVWF  25
0266:  MOVWF  28
0267:  CALL   160
....................        lcd_putc(ND%10+0X30);            
0268:  MOVF   20,W
0269:  MOVWF  25
026A:  MOVLW  0A
026B:  MOVWF  26
026C:  CALL   1CB
026D:  MOVLW  30
026E:  ADDWF  77,W
026F:  MOVWF  25
0270:  MOVWF  28
0271:  CALL   160
....................        lcd_putc(0XDF); 
0272:  MOVLW  DF
0273:  MOVWF  28
0274:  CALL   160
....................        lcd_putc("C    "); 
0275:  MOVLW  0E
0276:  BSF    03.6
0277:  MOVWF  0D
0278:  MOVLW  00
0279:  MOVWF  0F
027A:  BCF    03.6
027B:  CALL   185
....................         
....................        lcd_gotoxy(10,1);             
027C:  MOVLW  0A
027D:  MOVWF  29
027E:  MOVLW  01
027F:  MOVWF  2A
0280:  CALL   14E
....................        lcd_putc("DA:"); 
0281:  MOVLW  11
0282:  BSF    03.6
0283:  MOVWF  0D
0284:  MOVLW  00
0285:  MOVWF  0F
0286:  BCF    03.6
0287:  CALL   185
....................        lcd_putc(DA/10+0X30); 
0288:  MOVF   22,W
0289:  MOVWF  25
028A:  MOVLW  0A
028B:  MOVWF  26
028C:  CALL   1CB
028D:  MOVLW  30
028E:  ADDWF  78,W
028F:  MOVWF  25
0290:  MOVWF  28
0291:  CALL   160
....................        lcd_putc(DA%10+0X30); 
0292:  MOVF   22,W
0293:  MOVWF  25
0294:  MOVLW  0A
0295:  MOVWF  26
0296:  CALL   1CB
0297:  MOVLW  30
0298:  ADDWF  77,W
0299:  MOVWF  25
029A:  MOVWF  28
029B:  CALL   160
....................        lcd_putc(0X25);              // %     
029C:  MOVLW  25
029D:  MOVWF  28
029E:  CALL   160
....................     } 
....................     else  
029F:  GOTO   2AB
....................     { 
....................     lcd_gotoxy(1,1); 
02A0:  MOVLW  01
02A1:  MOVWF  29
02A2:  MOVWF  2A
02A3:  CALL   14E
....................     lcd_putc(" KHONG GAN CB "); 
02A4:  MOVLW  13
02A5:  BSF    03.6
02A6:  MOVWF  0D
02A7:  MOVLW  00
02A8:  MOVWF  0F
02A9:  BCF    03.6
02AA:  CALL   185
....................     } 
....................      
....................      
.................... } 
02AB:  BCF    0A.3
02AC:  BCF    0A.4
02AD:  GOTO   306 (RETURN)
....................  
.................... void kiemtra() 
.................... { 
*
002C:  DATA 00,00
....................    if(input(mua)==0)     
*
02AE:  BSF    03.5
02AF:  BSF    08.1
02B0:  BCF    03.5
02B1:  BTFSC  08.1
02B2:  GOTO   2DA
....................    { 
....................       output_high(loa);        
02B3:  BSF    03.5
02B4:  BCF    08.0
02B5:  BCF    03.5
02B6:  BSF    08.0
....................       output_high(led); 
02B7:  BCF    24.2
02B8:  MOVF   24,W
02B9:  BSF    03.5
02BA:  MOVWF  07
02BB:  BCF    03.5
02BC:  BSF    07.2
....................       delay_ms(100); 
02BD:  MOVLW  64
02BE:  MOVWF  31
02BF:  CALL   02D
....................       output_low(led); 
02C0:  BCF    24.2
02C1:  MOVF   24,W
02C2:  BSF    03.5
02C3:  MOVWF  07
02C4:  BCF    03.5
02C5:  BCF    07.2
....................       output_low(loa); 
02C6:  BSF    03.5
02C7:  BCF    08.0
02C8:  BCF    03.5
02C9:  BCF    08.0
....................       delay_ms(100); 
02CA:  MOVLW  64
02CB:  MOVWF  31
02CC:  CALL   02D
....................       lcd_gotoxy(1,2);               
02CD:  MOVLW  01
02CE:  MOVWF  29
02CF:  MOVLW  02
02D0:  MOVWF  2A
02D1:  CALL   14E
....................       lcd_putc("  TROI DANG MUA  "); 
02D2:  MOVLW  1B
02D3:  BSF    03.6
02D4:  MOVWF  0D
02D5:  MOVLW  00
02D6:  MOVWF  0F
02D7:  BCF    03.6
02D8:  CALL   185
....................    } 
....................    else            
02D9:  GOTO   2F3
....................    { 
....................       output_low(loa); 
02DA:  BSF    03.5
02DB:  BCF    08.0
02DC:  BCF    03.5
02DD:  BCF    08.0
....................       output_low(led); 
02DE:  BCF    24.2
02DF:  MOVF   24,W
02E0:  BSF    03.5
02E1:  MOVWF  07
02E2:  BCF    03.5
02E3:  BCF    07.2
....................       lcd_gotoxy(1,2);              
02E4:  MOVLW  01
02E5:  MOVWF  29
02E6:  MOVLW  02
02E7:  MOVWF  2A
02E8:  CALL   14E
....................       lcd_putc(" TROI KHONG MUA "); 
02E9:  MOVLW  24
02EA:  BSF    03.6
02EB:  MOVWF  0D
02EC:  MOVLW  00
02ED:  MOVWF  0F
02EE:  BCF    03.6
02EF:  CALL   185
....................       delay_ms(200); 
02F0:  MOVLW  C8
02F1:  MOVWF  31
02F2:  CALL   02D
....................    } 
.................... } 
02F3:  BCF    0A.3
02F4:  BCF    0A.4
02F5:  GOTO   307 (RETURN)
....................  
.................... void main() 
.................... { 
02F6:  CLRF   04
02F7:  BCF    03.7
02F8:  MOVLW  1F
02F9:  ANDWF  03,F
02FA:  BSF    03.5
02FB:  BSF    1F.0
02FC:  BSF    1F.1
02FD:  BSF    1F.2
02FE:  BCF    1F.3
02FF:  MOVLW  07
0300:  MOVWF  1C
....................    setup();       
*
0304:  GOTO   0FE
....................    while(true) 
....................    {     
....................       doc_dht11(); 
0305:  GOTO   1E0
....................       kiemtra(); 
0306:  GOTO   2AE
....................    } 
0307:  GOTO   305
.................... } 
.................... /***************************************************************/ 
....................  
0308:  SLEEP

Configuration Fuses:
   Word  1: 3F72   HS NOWDT PUT NODEBUG NOPROTECT BROWNOUT NOLVP NOCPD NOWRT
